{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction to CanFlasherBLT Using the OpenBLT bootloader for updating the firmware on your microcontroller via a CAN bus? Wouldn't it be great if you and your customers could use a dedicated low-cost USB-CAN PC adapter, instead of a conventional (read: much more expensive) USB-CAN PC adapter? Then look no further: CanFlasherBLT is here. CanFlasherBLT consist of ready-made firmware for the low-cost ($15-$20) Olimexino STM32F3 board. You simply connect one side of the Olimexino STM32F3 board to your PC with a USB cable, and the other side to your CAN bus. You can then use it with the usual OpenBLT PC tools such as MicroBoot and BootCommander to perform a firmware update, assuming that your microcontroller runs the OpenBLT bootloader on your microcontroller, How it works The OpenBLT bootloader communicates using the XCP protocol during a firmware update. An ideal communication protocol not only for data acquisition and calibration, but also for bootloader purposes. Under the hood, CanFlasherBLT essentially implements a USB to CAN gateway for the XCP protocol: From an end-user perspective, you simply reconfigure the OpenBLT PC tools for firmware updates via USB, instead of CAN. This means that during the firmware update, the PC thinks it's talking via USB with OpenBLT on the microcontroller. CanFlasherBLT translates all USB XCP packets to CAN XCP packets unidirectionally. In contrast to a conventional USB-CAN PC adapter, CanFlasherBLT supports automatic USB driver installation on Windows 10 and higher. Making it even more user-friendly for the end-user. Note that CanFlasherBLT works on Linux as well. Known limitations By design, CanFlasherBLT has two known limitations: Is it not a fully functional USB-CAN PC adapter. It's merely a USB-CAN XCP gateway used for the sole purpose for performing firmware updates on CAN nodes running the OpenBLT bootloader. As shown in the previous illustration, you can no longer configure the CAN baudrate and CAN identifiers in MicroBoot, once you select XCP on USB . The configuration values are now hardcoded into the CanFlasherBLT firmware. You can of course change them, but it involves rebuilding and reflashing the CanFlasherBLT firmware. Try it out If you'd like to take CanFlasherBLT for a spin, continue reading in the getting started section. Curious about the CanFlasherBLT source code? You can find it in the project's GitHub repository . It's MIT licensed, meaning that you can pretty much do whatever you want with it. As long as you leave the copyright and permission notice in tact. The source code contains a clear abstraction layer for all the board specifics. This makes it fairly straightforward to port it to different hardware.","title":"Home"},{"location":"#introduction-to-canflasherblt","text":"Using the OpenBLT bootloader for updating the firmware on your microcontroller via a CAN bus? Wouldn't it be great if you and your customers could use a dedicated low-cost USB-CAN PC adapter, instead of a conventional (read: much more expensive) USB-CAN PC adapter? Then look no further: CanFlasherBLT is here. CanFlasherBLT consist of ready-made firmware for the low-cost ($15-$20) Olimexino STM32F3 board. You simply connect one side of the Olimexino STM32F3 board to your PC with a USB cable, and the other side to your CAN bus. You can then use it with the usual OpenBLT PC tools such as MicroBoot and BootCommander to perform a firmware update, assuming that your microcontroller runs the OpenBLT bootloader on your microcontroller,","title":"Introduction to CanFlasherBLT"},{"location":"#how-it-works","text":"The OpenBLT bootloader communicates using the XCP protocol during a firmware update. An ideal communication protocol not only for data acquisition and calibration, but also for bootloader purposes. Under the hood, CanFlasherBLT essentially implements a USB to CAN gateway for the XCP protocol: From an end-user perspective, you simply reconfigure the OpenBLT PC tools for firmware updates via USB, instead of CAN. This means that during the firmware update, the PC thinks it's talking via USB with OpenBLT on the microcontroller. CanFlasherBLT translates all USB XCP packets to CAN XCP packets unidirectionally. In contrast to a conventional USB-CAN PC adapter, CanFlasherBLT supports automatic USB driver installation on Windows 10 and higher. Making it even more user-friendly for the end-user. Note that CanFlasherBLT works on Linux as well.","title":"How it works"},{"location":"#known-limitations","text":"By design, CanFlasherBLT has two known limitations: Is it not a fully functional USB-CAN PC adapter. It's merely a USB-CAN XCP gateway used for the sole purpose for performing firmware updates on CAN nodes running the OpenBLT bootloader. As shown in the previous illustration, you can no longer configure the CAN baudrate and CAN identifiers in MicroBoot, once you select XCP on USB . The configuration values are now hardcoded into the CanFlasherBLT firmware. You can of course change them, but it involves rebuilding and reflashing the CanFlasherBLT firmware.","title":"Known limitations"},{"location":"#try-it-out","text":"If you'd like to take CanFlasherBLT for a spin, continue reading in the getting started section. Curious about the CanFlasherBLT source code? You can find it in the project's GitHub repository . It's MIT licensed, meaning that you can pretty much do whatever you want with it. As long as you leave the copyright and permission notice in tact. The source code contains a clear abstraction layer for all the board specifics. This makes it fairly straightforward to port it to different hardware.","title":"Try it out"},{"location":"building/","text":"Building from source code This section contains detailed instructions on how to rebuild the CanFlasherBLT image from its source code. Dependencies It is assumed that Git , CMake and the ARM GCC Embedded toolchain are installed on the system and available on the PATH. Additionally, the GNU tools make and rm should be installed and available on the path. Windows users can install the GNU MCU Eclipse Windows Build Tools for this. Installation instructions for a Debian/Ubuntu based system: sudo apt install git cmake build-essential binutils-arm-none-eabi \\ gcc-arm-none-eabi libstdc++-arm-none-eabi-newlib \\ libnewlib-arm-none-eabi Getting the source code To get the code, clone the GIT repository to a subdirectory, for example inside your own home directory. Make sure to update the submodules after cloning the GIT repository, because CanFlasherBLT makes use of a few submodules: git clone https://github.com/feaser/canflasherblt.git ~/CanFlasherBLT cd ~/CanFlasherBLT git submodule update --init Building the image To build the CanFlasherBLT image from its source code, run these commands: cd build cmake -G \"Unix Makefiles\" -DCMAKE_BUILD_TYPE=Release .. make Upon completion, you can find the newly created image file at: ~/CanFlasherBLT/build/source/board/olimexino_stm32f3/CanFlasherBLT_Olimexino_STM32F3.srec To program it onto the Olimexino STM32F3, refer to the getting started section.","title":"Building the image"},{"location":"building/#building-from-source-code","text":"This section contains detailed instructions on how to rebuild the CanFlasherBLT image from its source code.","title":"Building from source code"},{"location":"building/#dependencies","text":"It is assumed that Git , CMake and the ARM GCC Embedded toolchain are installed on the system and available on the PATH. Additionally, the GNU tools make and rm should be installed and available on the path. Windows users can install the GNU MCU Eclipse Windows Build Tools for this. Installation instructions for a Debian/Ubuntu based system: sudo apt install git cmake build-essential binutils-arm-none-eabi \\ gcc-arm-none-eabi libstdc++-arm-none-eabi-newlib \\ libnewlib-arm-none-eabi","title":"Dependencies"},{"location":"building/#getting-the-source-code","text":"To get the code, clone the GIT repository to a subdirectory, for example inside your own home directory. Make sure to update the submodules after cloning the GIT repository, because CanFlasherBLT makes use of a few submodules: git clone https://github.com/feaser/canflasherblt.git ~/CanFlasherBLT cd ~/CanFlasherBLT git submodule update --init","title":"Getting the source code"},{"location":"building/#building-the-image","text":"To build the CanFlasherBLT image from its source code, run these commands: cd build cmake -G \"Unix Makefiles\" -DCMAKE_BUILD_TYPE=Release .. make Upon completion, you can find the newly created image file at: ~/CanFlasherBLT/build/source/board/olimexino_stm32f3/CanFlasherBLT_Olimexino_STM32F3.srec To program it onto the Olimexino STM32F3, refer to the getting started section.","title":"Building the image"},{"location":"gettingstarted/","text":"Getting started This section focuses on getting your Olimexino STM32F3 board prepared, such that it serves its purpose as a CanFlasherBLT device. You'll need the following items: An Olimex Olimexino STM3F3 board. A USB cable for connecting the board to your PC. The STM32CubeProgrammer tool installed on your PC. Regarding the board, make sure you order the Olimexino STM32F3 type. Not the Olimexino GD32F3 and also not the older Olimexino STM32. It needs to be the one with the STM32F303RCT6 microcontroller. Download the prebuilt firmware image As a first step, head over to the Releases section of the project's GitHub repository and download the prebuilt binary of the latest release. It's this file: CanFlasherBLT_Olimexino_STM32F3.srec Flash the firmware image Perform the following steps to flash the previously downloaded prebuilt firmware file into the flash memory of the on-board STM32F303RCT6 microcontroller: Connect the USB cable to the Olimexino STM32F3 board and insert the other end of the USB cable into a USB slot of your PC. While keeping the \"Boot\"-button pressed, briefly press the \"Reset\"-button. This activates the STM32F3's internal USB bootloader: Start the STM32CubeProgrammer tool on your PC. Select USB mode from the dropdown list (1), followed by clicking the \"Connect\"-button (2): Go to the \"Erase and Programming\" section (1), click the \"Browse\"-button (2), select the CanFlasherBLT_Olimexino_STM32F3.srec file (3) and click the \"Start Programming\"-button (4): To complete the firmware programming, close the STM32CubeProgrammer tool and briefly press the \"Reset\"-button on the board one more time. Check in the device manager As a quick verification of the CanFlasherBLT firmware programming, open up the Device Manager in Windows. Check that you see an entry called \"WinUSB Bulk Device\": If it doesn't show up, try removing the USB cable from your PC and plug it back in afterwards. Reconfigure MicroBoot or BootCommander In the MicroBoot settings, change \"XCP on CAN\" to \"XCP on USB\". During the next firmware update, MicroBoot will talk to the CanFlasherBLT device and thinks it is updating that one via USB. While in fact, the CanFlasherBLT firmware is passing all XCP requests and response packets to and from the CAN bus: The same method works for the command-line BootCommander tool. In this case you would just use the -t=xcp_usb parameter, instead of -t=xcp_can . Start the firmware update To try out a firmware update using the CanFlasherBLT device, connect it to the CAN bus. This assumes the presence of another CAN node that runs the OpenBLT bootloader and on which you would like to perform a firmware update. The Olimexino STM32F3 board features an on-board CAN transceiver. All you have to do is connect the CAN-HI and CAN-LO connector pins on the board to your CAN bus: Next, start the firmware update as usual with MicroBoot (or BootCommander): Changing CAN communication settings As mentioned in the introduction , one shortcoming of the CanFlasherBLT solution is that you can no longer specify the CAN communication settings from within MicroBoot / BootCommander. It always uses these default settings: CAN baudrate: 500 kbits/sec. CAN transmit identifier: 667h (11-bit) CAN receive identifier: 7E1h (11-bit) You can still change these CAN communication settings. The only downside is that you need to change this inside the CanFlasherBLT source code. Afterwards, you need to rebuild the CanFlasherBLT image from source code and flash it again on the Olimexino STM32F3 board. Refer to the Building section for detailed instructions on how to rebuilt the CanFlasherBLT image from source code. One way of changing the CAN communication settings is by editing the source\\gateway.hpp file and changing the values in one of the Gateway class constructors:","title":"Getting started"},{"location":"gettingstarted/#getting-started","text":"This section focuses on getting your Olimexino STM32F3 board prepared, such that it serves its purpose as a CanFlasherBLT device. You'll need the following items: An Olimex Olimexino STM3F3 board. A USB cable for connecting the board to your PC. The STM32CubeProgrammer tool installed on your PC. Regarding the board, make sure you order the Olimexino STM32F3 type. Not the Olimexino GD32F3 and also not the older Olimexino STM32. It needs to be the one with the STM32F303RCT6 microcontroller.","title":"Getting started"},{"location":"gettingstarted/#download-the-prebuilt-firmware-image","text":"As a first step, head over to the Releases section of the project's GitHub repository and download the prebuilt binary of the latest release. It's this file: CanFlasherBLT_Olimexino_STM32F3.srec","title":"Download the prebuilt firmware image"},{"location":"gettingstarted/#flash-the-firmware-image","text":"Perform the following steps to flash the previously downloaded prebuilt firmware file into the flash memory of the on-board STM32F303RCT6 microcontroller: Connect the USB cable to the Olimexino STM32F3 board and insert the other end of the USB cable into a USB slot of your PC. While keeping the \"Boot\"-button pressed, briefly press the \"Reset\"-button. This activates the STM32F3's internal USB bootloader: Start the STM32CubeProgrammer tool on your PC. Select USB mode from the dropdown list (1), followed by clicking the \"Connect\"-button (2): Go to the \"Erase and Programming\" section (1), click the \"Browse\"-button (2), select the CanFlasherBLT_Olimexino_STM32F3.srec file (3) and click the \"Start Programming\"-button (4): To complete the firmware programming, close the STM32CubeProgrammer tool and briefly press the \"Reset\"-button on the board one more time.","title":"Flash the firmware image"},{"location":"gettingstarted/#check-in-the-device-manager","text":"As a quick verification of the CanFlasherBLT firmware programming, open up the Device Manager in Windows. Check that you see an entry called \"WinUSB Bulk Device\": If it doesn't show up, try removing the USB cable from your PC and plug it back in afterwards.","title":"Check in the device manager"},{"location":"gettingstarted/#reconfigure-microboot-or-bootcommander","text":"In the MicroBoot settings, change \"XCP on CAN\" to \"XCP on USB\". During the next firmware update, MicroBoot will talk to the CanFlasherBLT device and thinks it is updating that one via USB. While in fact, the CanFlasherBLT firmware is passing all XCP requests and response packets to and from the CAN bus: The same method works for the command-line BootCommander tool. In this case you would just use the -t=xcp_usb parameter, instead of -t=xcp_can .","title":"Reconfigure MicroBoot or BootCommander"},{"location":"gettingstarted/#start-the-firmware-update","text":"To try out a firmware update using the CanFlasherBLT device, connect it to the CAN bus. This assumes the presence of another CAN node that runs the OpenBLT bootloader and on which you would like to perform a firmware update. The Olimexino STM32F3 board features an on-board CAN transceiver. All you have to do is connect the CAN-HI and CAN-LO connector pins on the board to your CAN bus: Next, start the firmware update as usual with MicroBoot (or BootCommander):","title":"Start the firmware update"},{"location":"gettingstarted/#changing-can-communication-settings","text":"As mentioned in the introduction , one shortcoming of the CanFlasherBLT solution is that you can no longer specify the CAN communication settings from within MicroBoot / BootCommander. It always uses these default settings: CAN baudrate: 500 kbits/sec. CAN transmit identifier: 667h (11-bit) CAN receive identifier: 7E1h (11-bit) You can still change these CAN communication settings. The only downside is that you need to change this inside the CanFlasherBLT source code. Afterwards, you need to rebuild the CanFlasherBLT image from source code and flash it again on the Olimexino STM32F3 board. Refer to the Building section for detailed instructions on how to rebuilt the CanFlasherBLT image from source code. One way of changing the CAN communication settings is by editing the source\\gateway.hpp file and changing the values in one of the Gateway class constructors:","title":"Changing CAN communication settings"}]}